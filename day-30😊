There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.

You are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.

Return true if grid represents a valid configuration of the knight's movements or false otherwise.






public class KnightTourValidator {
    private static final int[] dx = {2, 2, -2, -2, 1, 1, -1, -1};
    private static final int[] dy = {1, -1, 1, -1, 2, -2, 2, -2};
    
    public boolean isValidKnightTour(int[][] grid) {
        int n = grid.length;
        int[][] pos = new int[n * n][2];

        for (int i = 0; i < n; i++) {
            if (grid[i].length != n) {
                return false;
            }
            for (int j = 0; j < n; j++) {
                int val = grid[i][j];
                if (val < 0 || val >= n * n) {
                    return false; 
                }
                pos[val][0] = i;
                pos[val][1] = j;
            }
        }

        for (int k = 0; k < n * n - 1; k++) {
            int x0 = pos[k][0], y0 = pos[k][1];
            int x1 = pos[k + 1][0], y1 = pos[k + 1][1];
            boolean validMove = false;
            for (int m = 0; m < 8; m++) {
                if (x1 == x0 + dx[m] && y1 == y0 + dy[m]) {
                    validMove = true;
                    break;
                }
            }
            if (!validMove) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[][] grid = {
            {0, 15, 8, 1},
            {14, 9, 2, 7},
            {13, 6, 3, 10},
            {12, 5, 4, 11}
        };
        KnightTourValidator validator = new KnightTourValidator();
        System.out.println(validator.isValidKnightTour(grid));
    }
}
